{
  "/Users/timothymcdonald/Code/timothyjamesactor/src/sanity/schemaTypes/index.ts": "import { type SchemaTypeDefinition } from 'sanity';\nimport credit from '../../schemas/credit';\nimport headshot from '../../schemas/headshot';\nimport video from '../../schemas/video';\nimport about from '../../schemas/about';\nimport link from '../../schemas/link';\nimport attribute from '../../schemas/attribute';\nimport skill from '../../schemas/skill';\nimport imageAsset from '../../schemas/image';\n\nexport const schema: { types: SchemaTypeDefinition[] } = {\n  types: [credit, headshot, video, about, link, attribute, skill, imageAsset],\n};\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/about.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'about',\n  title: 'About',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'biography',\n      title: 'Biography',\n      type: 'text',\n      validation: (Rule) => Rule.required(),\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/attribute.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'attribute',\n  title: 'Attribute',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'category',\n      title: 'Category',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'value',\n      title: 'Value',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/credit.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'credit',\n  title: 'Credit',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'year',\n      title: 'Year',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'type',\n      title: 'Type',\n      type: 'string',\n      options: {\n        list: [\n          { title: 'Film', value: 'film' },\n          { title: 'TV', value: 'tv' },\n          { title: 'Musical Theatre', value: 'musicalTheatre' },\n          { title: 'Theatre', value: 'theatre' },\n          { title: 'Commercial', value: 'commercial' },\n          { title: 'Corporate', value: 'corporate' },\n          { title: 'Other', value: 'other' },\n        ],\n      },\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'project',\n      title: 'Project',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'director',\n      title: 'Director',\n      type: 'string',\n    }),\n    defineField({\n      name: 'company',\n      title: 'Company',\n      type: 'string',\n    }),\n    defineField({\n      name: 'role',\n      title: 'Role',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/headshot.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'headshot',\n  title: 'Headshot',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'image',\n      title: 'Image',\n      type: 'image',\n      options: {\n        hotspot: true, // Enables hotspot for image cropping\n      },\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'description',\n      title: 'Description',\n      type: 'text',\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/image.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'imageAsset',\n  title: 'Image Asset',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'image',\n      title: 'Image',\n      type: 'image',\n      options: {\n        hotspot: true, // Enables hotspot for image cropping\n      },\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'description',\n      title: 'Description',\n      type: 'text',\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/link.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'link',\n  title: 'Link',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'url',\n      title: 'URL',\n      type: 'url',\n      validation: (Rule) => Rule.required(),\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/skill.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'skill',\n  title: 'Skill',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'category',\n      title: 'Category',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'name',\n      title: 'Name',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'levelOfExpertise',\n      title: 'Level of Expertise',\n      type: 'string',\n    }),\n  ],\n});\n",
  "/Users/timothymcdonald/Code/timothyjamesactor/src/schemas/video.ts": "import { defineField, defineType } from 'sanity';\n\nexport default defineType({\n  name: 'video',\n  title: 'Video',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'url',\n      title: 'Video URL (YouTube or Vimeo)',\n      type: 'url',\n      validation: (Rule) =>\n        Rule.required().uri({\n          scheme: [/^https?:\/\/(www.youtube.com|youtu.be|vimeo.com)$/],\n          allowRelative: false,\n        }),\n    }),\n    defineField({\n      name: 'description',\n      title: 'Description',\n      type: 'text',\n    }),\n  ],\n});\n"
}